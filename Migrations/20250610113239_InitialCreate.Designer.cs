// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudetCouncilPlannerAPI.Data;

#nullable disable

namespace StudetCouncilPlannerAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250610113239_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan?>("EventTime")
                        .HasColumnType("interval");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<short?>("NumberOfParticipants")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.EventPartner", b =>
                {
                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.HasKey("PartnerId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventPartners");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.EventUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<short>("Role")
                        .HasColumnType("smallint");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventUsers");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.Meeting", b =>
                {
                    b.Property<Guid>("MeetingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Link")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("MeetingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("MeetingTime")
                        .HasColumnType("interval");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("MeetingId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.MeetingUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uuid");

                    b.Property<short>("Role")
                        .HasColumnType("smallint");

                    b.HasKey("UserId", "MeetingId");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingUsers");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.Note", b =>
                {
                    b.Property<Guid>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("NoteId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.Partner", b =>
                {
                    b.Property<Guid>("PartnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Archive")
                        .HasColumnType("boolean");

                    b.Property<string>("Contacts")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("PartnerId");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.Task", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("TaskId");

                    b.HasIndex("EventId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.TaskUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<short>("Role")
                        .HasColumnType("smallint");

                    b.HasKey("UserId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskUsers");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Archive")
                        .HasColumnType("boolean");

                    b.Property<string>("Contacts")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.Property<short>("Role")
                        .HasColumnType("smallint");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("UserId");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.EventPartner", b =>
                {
                    b.HasOne("StudetCouncilPlannerAPI.Models.Entities.Event", "Event")
                        .WithMany("EventPartners")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudetCouncilPlannerAPI.Models.Entities.Partner", "Partner")
                        .WithMany("EventPartners")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.EventUser", b =>
                {
                    b.HasOne("StudetCouncilPlannerAPI.Models.Entities.Event", "Event")
                        .WithMany("EventUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudetCouncilPlannerAPI.Models.Entities.User", "User")
                        .WithMany("EventUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.MeetingUser", b =>
                {
                    b.HasOne("StudetCouncilPlannerAPI.Models.Entities.Meeting", "Meeting")
                        .WithMany("MeetingUsers")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudetCouncilPlannerAPI.Models.Entities.User", "User")
                        .WithMany("MeetingUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.Note", b =>
                {
                    b.HasOne("StudetCouncilPlannerAPI.Models.Entities.Event", "Event")
                        .WithMany("Notes")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudetCouncilPlannerAPI.Models.Entities.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.Task", b =>
                {
                    b.HasOne("StudetCouncilPlannerAPI.Models.Entities.Event", "Event")
                        .WithMany("Tasks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudetCouncilPlannerAPI.Models.Entities.Partner", "Partner")
                        .WithMany("Tasks")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Event");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.TaskUser", b =>
                {
                    b.HasOne("StudetCouncilPlannerAPI.Models.Entities.Task", "Task")
                        .WithMany("TaskUsers")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudetCouncilPlannerAPI.Models.Entities.User", "User")
                        .WithMany("TaskUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.Event", b =>
                {
                    b.Navigation("EventPartners");

                    b.Navigation("EventUsers");

                    b.Navigation("Notes");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.Meeting", b =>
                {
                    b.Navigation("MeetingUsers");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.Partner", b =>
                {
                    b.Navigation("EventPartners");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.Task", b =>
                {
                    b.Navigation("TaskUsers");
                });

            modelBuilder.Entity("StudetCouncilPlannerAPI.Models.Entities.User", b =>
                {
                    b.Navigation("EventUsers");

                    b.Navigation("MeetingUsers");

                    b.Navigation("Notes");

                    b.Navigation("TaskUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
